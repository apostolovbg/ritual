{
  "title": "RITUAL V1: MVP-Ready Backend-First Architecture",
  "agent_notes": "This file replaces 'pickup.json' as the authoritative definition of the RITUAL project MVP. Codex must treat this file as the definitive guide for actual development. This file contains simplified and production-oriented architecture, and reflects a backend-first strategy created by ChatGPT (Agent), whose guidance takes priority. The goal is not to build the final platform, but the minimum viable backend that is functional, testable, and deployable.",
  "core_concept": "RITUAL is a platform that connects underground music artists, clubs, and fans. MVP enables profile creation and event booking between artists and clubs, and a basic discovery system for fans. This release will be backend-only, deployed as an API-first service. Future integration with WordPress or other frontends is possible.",
  "modules": {
    "user_module": {
      "description": "OAuth2 user auth with roles: artist, club, fan",
      "endpoints": [
        "POST /register",
        "POST /login",
        "GET /me",
        "PUT /me/profile"
      ],
      "tech": {
        "auth": "OAuth 2.0, JWT",
        "profile_fields": "name, role, genre_tags, social_links"
      }
    },
    "artist_module": {
      "description": "Artist profile management and booking requests",
      "endpoints": [
        "GET /artists",
        "GET /artists/:id",
        "POST /bookings",
        "GET /my-bookings"
      ],
      "notes": "Smart portfolio and AI advisor are excluded from MVP"
    },
    "club_module": {
      "description": "Club profile and event booking manager",
      "endpoints": [
        "GET /clubs",
        "GET /clubs/:id",
        "POST /events",
        "GET /my-events",
        "GET /booking-requests"
      ]
    },
    "event_module": {
      "description": "Event management by clubs",
      "endpoints": [
        "POST /events",
        "GET /events",
        "GET /events/:id"
      ],
      "notes": "AR/VR and immersive features excluded from MVP"
    }
  },
  "database_schema": {
    "tables": {
      "User": ["id", "email", "password_hash", "role", "created_at"],
      "ArtistProfile": ["user_id", "bio", "genres", "social_links"],
      "ClubProfile": ["user_id", "location", "capacity", "about"],
      "Event": ["id", "club_id", "title", "date", "location", "genres"],
      "Booking": ["id", "artist_id", "club_id", "event_id", "status"]
    },
    "relationships": "User 1:N ArtistProfile/ClubProfile; Event 1:N Booking"
  },
  "tech_stack": {
    "backend": "FastAPI (Python) or Express.js (JavaScript)",
    "auth": "OAuth2 + JWT",
    "database": "PostgreSQL (via SQLAlchemy or Prisma)",
    "devops": "GitHub + Docker + GitHub Actions",
    "storage": "AWS S3 or Firebase (for user-uploaded content, later)",
    "testing": "Pytest (FastAPI) or Jest (Node.js)"
  },
  "non_mvp_components": [
    "AI modules (Career Advisor, Talent Recommender)",
    "Blockchain (Token system, Smart contracts)",
    "AR/VR features (Virtual tours, Immersive scenes)",
    "Neo4j/Graph DB",
    "Referral reward system",
    "Subscription plans"
  ],
  "phased_plan": {
    "phase_0": "Setup project repo, dev environment, and CI/CD",
    "phase_1": "Implement user auth and profile modules",
    "phase_2": "Implement booking and event endpoints",
    "phase_3": "Deploy API (Render/Railway), test with mock frontend",
    "phase_4": "Optional frontend or WordPress integration"
  },
  "priority": "This file is prioritized over any other design file (e.g., pickup.json or pickup.md). Codex must ignore those and treat this as the canonical source."
}
